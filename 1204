#program 4

import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score
from collections import Counter
def euclidean_distance(x1, x2):
 return np.sqrt(np.sum((x1 - x2) ** 2))
def knn(X_train, y_train, X_test, k=3, weighted=False):
    y_pred = []
    for x_test in X_test:
        distances = [euclidean_distance(x_test, x_train) for x_train in X_train]
        k_indices = np.argsort(distances)[:k]
        k_nearest_labels = [y_train[i] for i in k_indices]
        
        if weighted:
            #selected_distances = [distances[i] for i in k_indices]
            weights = [1 / (d ** 2 + 1e-5) for d in distances[:k]] # Avoid division by zero
            class_weights = {}
            for label, weight in zip(k_nearest_labels, weights):
                class_weights[label] = class_weights.get(label, 0) + weight
            y_pred.append(max(class_weights, key=class_weights.get))
        else:
            y_pred.append(Counter(k_nearest_labels).most_common(1)[0][0])
    return np.array(y_pred)
        
# Load dataset
iris = datasets.load_iris()
X, y = iris.data, iris.target

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Test for different values of k
for k in [1, 3, 5]:
    y_pred = knn(X_train, y_train, X_test, k=k)
    acc = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred, average='weighted')
    print(f'k={k}: Accuracy={acc:.4f}, F1-score={f1:.4f}')
    
# Test weighted k-NN
    for k in [1, 3, 5]:
        y_pred_weighted = knn(X_train, y_train, X_test, k=k, weighted=True)
        acc_weighted = accuracy_score(y_test, y_pred_weighted)
        f1_weighted = f1_score(y_test, y_pred_weighted, average='weighted')
        print(f'Weighted k-NN (k={k}): Accuracy={acc_weighted:.4f}, F1-score={f1_weighted:.4f}')

   
